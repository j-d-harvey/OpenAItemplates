{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.19.5.34762",
      "templateHash": "11144282632868588311"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "openAiAccountName": {
      "type": "string",
      "defaultValue": "oai-private-demo",
      "metadata": {
        "description": "Name of the Azure OpenAI account"
      }
    },
    "oaiCustomSubDomainName": {
      "type": "string",
      "defaultValue": "[format('oai-{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Custom subdomain name for the Azure OpenAI account"
      }
    },
    "oaiSku": {
      "type": "string",
      "defaultValue": "S0",
      "metadata": {
        "description": "SKU for the Azure OpenAI account"
      }
    },
    "embeddingsDeploymentCapacity": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Tokens per Minute Rate Limit (thousands)"
      }
    },
    "embeddingsModelName": {
      "type": "string",
      "defaultValue": "text-embedding-ada-002",
      "metadata": {
        "description": "Name of the Embeddings Model to deploy"
      }
    },
    "gptDeploymentCapacity": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Tokens per Minute Rate Limit (thousands)"
      }
    },
    "chatGptModelName": {
      "type": "string",
      "defaultValue": "gpt-35-turbo",
      "metadata": {
        "description": "Name of the GPT Model to deploy"
      }
    },
    "apimSku": {
      "type": "string",
      "defaultValue": "Developer",
      "allowedValues": [
        "Developer",
        "Premium"
      ],
      "metadata": {
        "description": "The pricing tier of the API Management service"
      }
    },
    "apimCapacity": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of instances of the API Management service to deploy"
      }
    },
    "apimName": {
      "type": "string",
      "defaultValue": "[format('apim-{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the API Management service"
      }
    },
    "apimPublisherEmail": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The email address of the owner of the API Management service"
      }
    },
    "apimPublisherName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The name of the owner of the API Management service"
      }
    },
    "apimPrivateDnsZoneName": {
      "type": "string",
      "defaultValue": "azure-api.net",
      "metadata": {
        "description": "Name of the API Management Private DNS Zone"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "vnet-oai-demo",
      "metadata": {
        "description": "Name of the Azure Virtual Network"
      }
    },
    "oaiPrivateDnsZoneName": {
      "type": "string",
      "defaultValue": "privatelink.openai.azure.com",
      "metadata": {
        "description": "Name of the Azure OpenaAI Private DNS Zone"
      }
    },
    "oaiPrivateEndpointName": {
      "type": "string",
      "defaultValue": "oaiDemoPrivateEndpoint",
      "metadata": {
        "description": "Name of the Azure OpenaAI Private Endpoint"
      }
    },
    "bastionHostName": {
      "type": "string",
      "defaultValue": "bastion-oai-demo",
      "metadata": {
        "description": "The name of the Azure Bastion host"
      }
    },
    "vmAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin Username for the Virtual Machine."
      }
    },
    "vmAdminPassword": {
      "type": "securestring",
      "minLength": 12,
      "metadata": {
        "description": "Admin Password for the Virtual Machine."
      }
    },
    "OSVersion": {
      "type": "string",
      "defaultValue": "win11-22h2-ent",
      "allowedValues": [
        "win11-22h2-pro",
        "win11-22h2-pron",
        "win11-22h2-pro-zh-cn",
        "win11-22h2-ent"
      ],
      "metadata": {
        "description": "The Windows version for the VM"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D2s_v5",
      "metadata": {
        "description": "Size of the virtual machine."
      }
    },
    "vmName": {
      "type": "string",
      "defaultValue": "vm-oai-demo",
      "metadata": {
        "description": "Name of the virtual machine."
      }
    },
    "securityType": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard",
        "TrustedLaunch"
      ],
      "metadata": {
        "description": "Security Type of the Virtual Machine."
      }
    },
    "kvPrivateDnsZoneName": {
      "type": "string",
      "defaultValue": "privatelink.vaultcore.azure.net",
      "metadata": {
        "description": "Name of the Key Vault Private DNS Zone"
      }
    },
    "kvPrivateEndpointName": {
      "type": "string",
      "defaultValue": "kvPrivateEndpoint",
      "metadata": {
        "description": "Name of the Key Vault Private Endpoint"
      }
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "[format('kv-{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Specifies the name of the key vault."
      }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "Azure Active Directory tenant ID that should be used for authenticating requests to the key vault"
      }
    },
    "kvSkuName": {
      "type": "string",
      "defaultValue": "standard",
      "metadata": {
        "description": "SKU of the key vault."
      }
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "defaultValue": "[format('la-{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the Log Analytics account"
      }
    },
    "applicationInsightsName": {
      "type": "string",
      "defaultValue": "appi-oai-demo",
      "metadata": {
        "description": "Name of the Log Analytics account"
      }
    }
  },
  "variables": {
    "securityProfileJson": {
      "uefiSettings": {
        "secureBootEnabled": true,
        "vTpmEnabled": true
      },
      "securityType": "[parameters('securityType')]"
    },
    "extensionName": "GuestAttestation",
    "extensionPublisher": "Microsoft.Azure.Security.WindowsAttestation",
    "extensionVersion": "1.0",
    "maaTenantName": "GuestAttestation",
    "maaEndpoint": "[substring('emptyString', 0, 0)]",
    "apimRoleDefinitionId": "4633458b-17de-408a-b874-0445c86b69e6",
    "embeddingsDeployment": "[if(empty(parameters('embeddingsModelName')), 'ada', parameters('embeddingsModelName'))]",
    "chatGptDeployment": "[if(empty(parameters('chatGptModelName')), 'chat', parameters('chatGptModelName'))]",
    "deployments": [
      {
        "name": "[variables('embeddingsDeployment')]",
        "model": {
          "format": "OpenAI",
          "name": "[parameters('embeddingsModelName')]"
        },
        "sku": {
          "name": "Standard",
          "capacity": "[parameters('embeddingsDeploymentCapacity')]"
        }
      },
      {
        "name": "[variables('chatGptDeployment')]",
        "model": {
          "format": "OpenAI",
          "name": "[parameters('chatGptModelName')]"
        },
        "sku": {
          "name": "Standard",
          "capacity": "[parameters('gptDeploymentCapacity')]"
        }
      }
    ]
  },
  "resources": [
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2022-07-01",
      "name": "nsg-basic-oai-demo",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": []
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2022-11-01",
      "name": "[parameters('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/24"
          ]
        },
        "subnets": [
          {
            "name": "OpenAI",
            "properties": {
              "addressPrefix": "10.0.0.0/27",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-basic-oai-demo')]"
              },
              "privateEndpointNetworkPolicies": "Enabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            },
            "type": "Microsoft.Network/virtualNetworks/subnets"
          },
          {
            "name": "VMs",
            "properties": {
              "addressPrefix": "10.0.0.32/28",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-basic-oai-demo')]"
              }
            },
            "type": "Microsoft.Network/virtualNetworks/subnets"
          },
          {
            "name": "APIM",
            "properties": {
              "addressPrefix": "10.0.0.64/27",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-apim-oai-demo')]"
              }
            },
            "type": "Microsoft.Network/virtualNetworks/subnets"
          },
          {
            "name": "PrivateEndpoints",
            "properties": {
              "addressPrefix": "10.0.0.128/27",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-basic-oai-demo')]"
              },
              "privateEndpointNetworkPolicies": "Enabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            },
            "type": "Microsoft.Network/virtualNetworks/subnets"
          },
          {
            "name": "AzureBastionSubnet",
            "properties": {
              "addressPrefix": "10.0.0.192/26",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}', parameters('bastionHostName')))]"
              },
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Disabled"
            },
            "type": "Microsoft.Network/virtualNetworks/subnets"
          }
        ],
        "virtualNetworkPeerings": []
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-apim-oai-demo')]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-basic-oai-demo')]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}', parameters('bastionHostName')))]"
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2022-10-01",
      "name": "[parameters('logAnalyticsWorkspaceName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[parameters('applicationInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2023-05-01",
      "name": "[parameters('openAiAccountName')]",
      "location": "[parameters('location')]",
      "kind": "OpenAI",
      "properties": {
        "customSubDomainName": "[parameters('oaiCustomSubDomainName')]",
        "publicNetworkAccess": "Disabled"
      },
      "sku": {
        "name": "[parameters('oaiSku')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
      ]
    },
    {
      "copy": {
        "name": "deployment",
        "count": "[length(variables('deployments'))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.CognitiveServices/accounts/deployments",
      "apiVersion": "2023-05-01",
      "name": "[format('{0}/{1}', parameters('openAiAccountName'), variables('deployments')[copyIndex()].name)]",
      "properties": {
        "model": "[variables('deployments')[copyIndex()].model]",
        "raiPolicyName": "[if(contains(variables('deployments')[copyIndex()], 'raiPolicyName'), variables('deployments')[copyIndex()].raiPolicyName, null())]"
      },
      "sku": "[if(contains(variables('deployments')[copyIndex()], 'sku'), variables('deployments')[copyIndex()].sku, createObject('name', 'Standard', 'capacity', 20))]",
      "dependsOn": [
        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('openAiAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "privatelink.openai.azure.com",
      "location": "global",
      "properties": {},
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', 'privatelink.openai.azure.com', format('{0}-link', parameters('oaiPrivateDnsZoneName')))]",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.openai.azure.com')]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2022-11-01",
      "name": "[parameters('oaiPrivateEndpointName')]",
      "location": "[parameters('location')]",
      "properties": {
        "privateLinkServiceConnections": [
          {
            "name": "[format('{0}-connection', parameters('oaiPrivateEndpointName'))]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('openAiAccountName'))]",
              "groupIds": [
                "account"
              ],
              "privateLinkServiceConnectionState": {
                "status": "Approved",
                "description": "Approved",
                "actionsRequired": "None"
              }
            }
          }
        ],
        "customNetworkInterfaceName": "[format('{0}-nic', parameters('oaiPrivateEndpointName'))]",
        "subnet": {
          "id": "[format('{0}/subnets/OpenAI', resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('openAiAccountName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2021-05-01",
      "name": "[format('{0}/{1}', parameters('oaiPrivateEndpointName'), 'default')]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "config1",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.openai.azure.com')]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.openai.azure.com')]",
        "[resourceId('Microsoft.Network/privateEndpoints', parameters('oaiPrivateEndpointName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAiAccountName'))]",
      "name": "[format('{0}-diags', parameters('openAiAccountName'))]",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
        "logs": [
          {
            "categoryGroup": "allLogs",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": 90
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('openAiAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2021-11-01-preview",
      "name": "[parameters('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "tenantId": "[parameters('tenantId')]",
        "enableRbacAuthorization": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 90,
        "sku": {
          "name": "[parameters('kvSkuName')]",
          "family": "A"
        },
        "networkAcls": {
          "defaultAction": "Deny",
          "bypass": "AzureServices"
        }
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-04-01-preview",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
      "name": "[guid(variables('apimRoleDefinitionId'), resourceId('Microsoft.ApiManagement/service', parameters('apimName')), resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')))]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
        "principalId": "[reference(resourceId('Microsoft.ApiManagement/service', parameters('apimName')), '2023-03-01-preview', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('apimName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-11-01-preview",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'oaiAccountKey')]",
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAiAccountName')), '2023-05-01').key1]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('openAiAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2022-11-01",
      "name": "[parameters('kvPrivateEndpointName')]",
      "location": "[parameters('location')]",
      "properties": {
        "privateLinkServiceConnections": [
          {
            "name": "[format('{0}-connection', parameters('kvPrivateEndpointName'))]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
              "groupIds": [
                "vault"
              ],
              "privateLinkServiceConnectionState": {
                "status": "Approved",
                "description": "Approved",
                "actionsRequired": "None"
              }
            }
          }
        ],
        "customNetworkInterfaceName": "[format('{0}-nic', parameters('kvPrivateEndpointName'))]",
        "subnet": {
          "id": "[format('{0}/subnets/PrivateEndpoints', resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "[parameters('kvPrivateDnsZoneName')]",
      "location": "global",
      "properties": {},
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', parameters('kvPrivateDnsZoneName'), format('{0}-link', parameters('kvPrivateDnsZoneName')))]",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', parameters('kvPrivateDnsZoneName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2021-05-01",
      "name": "[format('{0}/{1}', parameters('kvPrivateEndpointName'), 'default')]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "config1",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', parameters('kvPrivateDnsZoneName'))]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', parameters('kvPrivateDnsZoneName'))]",
        "[resourceId('Microsoft.Network/privateEndpoints', parameters('kvPrivateEndpointName'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service",
      "apiVersion": "2023-03-01-preview",
      "name": "[parameters('apimName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('apimSku')]",
        "capacity": "[parameters('apimCapacity')]"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "publisherEmail": "[parameters('apimPublisherEmail')]",
        "publisherName": "[parameters('apimPublisherName')]",
        "virtualNetworkType": "Internal",
        "virtualNetworkConfiguration": {
          "subnetResourceId": "[format('{0}/subnets/APIM', resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2022-07-01",
      "name": "nsg-apim-oai-demo",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowManagementEndpointInBound",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "ApiManagement",
              "destinationPortRange": "3443",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/loggers",
      "apiVersion": "2023-03-01-preview",
      "name": "[format('{0}/{1}', parameters('apimName'), 'appInsightsLogger')]",
      "properties": {
        "loggerType": "applicationInsights",
        "resourceId": "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]",
        "credentials": {
          "instrumentationKey": "[reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').InstrumentationKey]"
        },
        "isBuffered": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('apimName'))]",
        "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/diagnostics",
      "apiVersion": "2023-03-01-preview",
      "name": "[format('{0}/{1}', parameters('apimName'), 'applicationinsights')]",
      "properties": {
        "alwaysLog": "allErrors",
        "httpCorrelationProtocol": "W3C",
        "verbosity": "information",
        "logClientIp": true,
        "loggerId": "[resourceId('Microsoft.ApiManagement/service/loggers', parameters('apimName'), 'appInsightsLogger')]",
        "sampling": {
          "samplingType": "fixed",
          "percentage": 100
        },
        "frontend": {
          "request": {
            "headers": [],
            "body": {
              "bytes": 8192
            }
          },
          "response": {
            "headers": [],
            "body": {
              "bytes": 8192
            }
          }
        },
        "backend": {
          "request": {
            "headers": [],
            "body": {
              "bytes": 8192
            }
          },
          "response": {
            "headers": [],
            "body": {
              "bytes": 8192
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('apimName'))]",
        "[resourceId('Microsoft.ApiManagement/service/loggers', parameters('apimName'), 'appInsightsLogger')]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "[parameters('apimPrivateDnsZoneName')]",
      "location": "global",
      "properties": {},
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', parameters('apimPrivateDnsZoneName'), format('{0}-link', parameters('apimPrivateDnsZoneName')))]",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', parameters('apimPrivateDnsZoneName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
      ]
    },
    {
      "condition": true,
      "type": "Microsoft.Network/privateDnsZones/A",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', parameters('apimPrivateDnsZoneName'), parameters('apimName'))]",
      "location": "global",
      "properties": {
        "ttl": 36000,
        "aRecords": [
          {
            "ipv4Address": "[reference(resourceId('Microsoft.ApiManagement/service', parameters('apimName')), '2023-03-01-preview').privateIPAddresses[0]]"
          },
          {
            "ipv4Address": "[format('{0}.portal', reference(resourceId('Microsoft.ApiManagement/service', parameters('apimName')), '2023-03-01-preview').privateIPAddresses[0])]"
          },
          {
            "ipv4Address": "[format('{0}.developer', reference(resourceId('Microsoft.ApiManagement/service', parameters('apimName')), '2023-03-01-preview').privateIPAddresses[0])]"
          },
          {
            "ipv4Address": "[format('{0}.management', reference(resourceId('Microsoft.ApiManagement/service', parameters('apimName')), '2023-03-01-preview').privateIPAddresses[0])]"
          },
          {
            "ipv4Address": "[format('{0}.scm', reference(resourceId('Microsoft.ApiManagement/service', parameters('apimName')), '2023-03-01-preview').privateIPAddresses[0])]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('apimName'))]",
        "[resourceId('Microsoft.Network/privateDnsZones', parameters('apimPrivateDnsZoneName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2022-05-01",
      "name": "[format('{0}-nic', parameters('vmName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[format('{0}/subnets/VMs', resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')))]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2022-03-01",
      "name": "[parameters('vmName')]",
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('vmName')]",
          "adminUsername": "[parameters('vmAdminUsername')]",
          "adminPassword": "[parameters('vmAdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "microsoftwindowsdesktop",
            "offer": "windows-11",
            "sku": "[parameters('OSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "StandardSSD_LRS"
            }
          },
          "dataDisks": []
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', parameters('vmName')))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": false
          }
        },
        "securityProfile": "[if(equals(parameters('securityType'), 'TrustedLaunch'), variables('securityProfileJson'), null())]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', parameters('vmName')))]"
      ]
    },
    {
      "condition": "[and(equals(parameters('securityType'), 'TrustedLaunch'), and(equals(variables('securityProfileJson').uefiSettings.secureBootEnabled, true()), equals(variables('securityProfileJson').uefiSettings.vTpmEnabled, true())))]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2022-03-01",
      "name": "[format('{0}/{1}', parameters('vmName'), variables('extensionName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "[variables('extensionPublisher')]",
        "type": "[variables('extensionName')]",
        "typeHandlerVersion": "[variables('extensionVersion')]",
        "autoUpgradeMinorVersion": true,
        "enableAutomaticUpgrade": true,
        "settings": {
          "AttestationConfig": {
            "MaaSettings": {
              "maaEndpoint": "[variables('maaEndpoint')]",
              "maaTenantName": "[variables('maaTenantName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2022-07-01",
      "name": "[format('pip-{0}', parameters('bastionHostName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Static"
      },
      "sku": {
        "name": "Standard"
      }
    },
    {
      "type": "Microsoft.Network/bastionHosts",
      "apiVersion": "2022-07-01",
      "name": "[parameters('bastionHostName')]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "properties": {
              "subnet": {
                "id": "[format('{0}/subnets/AzureBastionSubnet', resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')))]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', format('pip-{0}', parameters('bastionHostName')))]"
              },
              "privateIPAllocationMethod": "Dynamic"
            },
            "name": "ipconfig1"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', format('pip-{0}', parameters('bastionHostName')))]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2022-07-01",
      "name": "[format('nsg-{0}', parameters('bastionHostName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowHttpsInBound",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "Internet",
              "destinationPortRange": "443",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowGatewayManagerInBound",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "GatewayManager",
              "destinationPortRange": "443",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 110,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowLoadBalancerInBound",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "AzureLoadBalancer",
              "destinationPortRange": "443",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 120,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowBastionHostCommunicationInBound",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationPortRanges": [
                "8080",
                "5701"
              ],
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 130,
              "direction": "Inbound"
            }
          },
          {
            "name": "DenyAllInBound",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationPortRange": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 1000,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowSshRdpOutBound",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationPortRanges": [
                "22",
                "3389"
              ],
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 100,
              "direction": "Outbound"
            }
          },
          {
            "name": "AllowAzureCloudCommunicationOutBound",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationPortRange": "443",
              "destinationAddressPrefix": "AzureCloud",
              "access": "Allow",
              "priority": 110,
              "direction": "Outbound"
            }
          },
          {
            "name": "AllowBastionHostCommunicationOutBound",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationPortRanges": [
                "8080",
                "5701"
              ],
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 120,
              "direction": "Outbound"
            }
          },
          {
            "name": "AllowGetSessionInformationOutBound",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "Internet",
              "destinationPortRanges": [
                "80",
                "443"
              ],
              "access": "Allow",
              "priority": 130,
              "direction": "Outbound"
            }
          }
        ]
      }
    }
  ]
}